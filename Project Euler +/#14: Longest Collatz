def collatz_length(n, memo):
    if n in memo:
        return memo[n]

    if n == 1:
        return 1

    # Calculate the next number in the sequence
    if n % 2 == 0:
        next_n = n // 2
    else:
        next_n = 3 * n + 1

    # Recursively get the length of the Collatz sequence
    length = 1 + collatz_length(next_n, memo)
    memo[n] = length  # Store the result in memoization dictionary
    return length

def longest_collatz_sequence(m):
    max_length = 0
    number_with_max_length = 1
    memo = {}  # Initialize memoization dictionary

    for i in range(1, m + 1):
        current_length = collatz_length(i, memo)
        if current_length > max_length:
            max_length = current_length
            number_with_max_length = i

    return number_with_max_length, max_length

# Main program
if __name__ == "__main__":
    t = int(input())
    results = []
    
    for _ in range(t):
        n = int(input())
        number, length = longest_collatz_sequence(n)
        results.append(number)

    for result in results:
        print(result)
